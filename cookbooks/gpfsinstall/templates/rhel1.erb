Vagrant.configure("2") do |config|

  config.vm.box = "https://github.com/CommanderK5/packer-centos-template/releases/download/0.6.7/vagrant-centos-6.7.box"

### Creating disks for future GPFS clustered FS 
####
################ Vagrant Section ######################

	config.vm.provider :virtualbox do |v|
  if not File.exists?('disk1_gpfs.vdi')
  v.customize ['createhd', '--filename', 'disk1_gpfs.vdi', '--size', 10 * 1024 ]
end
  
  if not File.exists?('disk2_gpfs.vdi')
  v.customize ['createhd', '--filename', 'disk2_gpfs.vdi', '--size', 10 * 1024 ]
  end
  v.customize ['storageattach', :id, '--storagectl', 'SATA Controller', '--port', 1, '--device', 0, '--type', 'hdd', '--medium', 'disk1_gpfs.vdi']
  v.customize ['storageattach', :id, '--storagectl', 'SATA Controller', '--port', 2, '--device', 0, '--type', 'hdd', '--medium', 'disk2_gpfs.vdi']

end


# saving BASH script as variable to be parsed to Vagrant provisioner 
#######################
########
#

$script = << BASH

	ls /vagrant/Spectrum_Scale_Advanced-4.2.1.0-x86_64-Linux-install

		if [ $? -ne 0 ]
		then
			echo "GPFS INSTALLER NOT FOUND IN /vagrant You`re not Authorized to have the GPFS Installer :) Contact Robert Nicoara ASAP on ST Internal Messenger "
		else
			mkdir -p /root/gpfspack ; cd /root/gpfspack ; cp /vagrant/Spectrum_Scale_Advanced-4.2.1.0-x86_64-Linux-install . ;  tar -xvf SpectrumScaleAdv421LXx86.tgz ; chmod +x Spectrum_Scale_Advanced-4.2.1.0-x86_64-Linux-install ; ./Spectrum_Scale_Advanced-4.2.1.0-x86_64-Linux-install --text-only --silent
			cd /usr/lpp/mmfs/4.2.1.0 ; mkdir need ; cd need

#STARTING for to move base needded files 

     			for pack in gpfs.ext-*.x86_64.rpm gpfs.docs-*.noarch.rpm kmod-gpfs-*.sdl6.x86_64.rpm gpfs.base-*.x86_64.rpm gpfs.gskit-*.x86_64.rpm gpfs.msg.en_US-*.noarch.rpm gpfs.gpl-*.noarch.rpm
	         		do
			    	cp ../$pack .
				done

	# Begining local install
	       yum localinstall *rpm 

	# Adding second first ( this) and second host ips in /etc/hosts
		echo >> "192.168.0.157		gpfs01.learning.learn gpfs01" >> /etc/hosts
		echo >> "192.168.0.158		gpfs02.learning.learn gpfs02" >> /etc/hosts

	# Making hosts love each other ( SSH Authorized_keys)

		ssh-keygen -f /root/.ssh/id_rsa -t rsa -N '' #<--- Here we generate the key without passphrase 

		 

     # Setting the same KHeaders / kernel / versions ... 

    yum install kernel-devel-2.6.32-504.12.2.el6
    yum install imake gcc-c++ rpm-build

    # GPFS portability layer (making gpfs access the LIN Kern ) 

    	cd /usr/lpp/mmfs/src ; make Autoconfig ; make World ; make InstallImages ; make rpm   #<-- This will generate an RPM needed on all nodes 

# Sending the rpm to node 2
ssh-copy-id root@gpfs02 
    	scp /root/rpmbuild/RPMS/x86_64/*rpm root@gpfs02:/root/

    	# Installing the RPM on LocalHost as well
    		yum localinstall /root/rpmbuild/RPMS/x86_64/*rpm






############## CREATING THE CLUSER ( QUORUM SIDE)

/usr/lpp/mmfs/bin/mmcrcluster -N gpfs01:manager-quorum -p gpfs01 -r /usr/bin/ssh -R /usr/bin/scp
# ACCEPT LICENSE
 /usr/lpp/mmfs/bin/mmchlicense server --accept -N gpfs01


 # ADD SECOND NODE
 /usr/lpp/mmfs/bin/mmaddnode -N gpfs02 
 #ACC L for second N

 /usr/lpp/mmfs/bin/mmchlicense server --accept -N gpfs02



 # CREATE NSD DISKS CONFIG



 touch /var/rsa/NSDCONF.txt

 echo "%nsd:" >> /var/rsa/NSDCONF.txt
echo "device=/dev/sdb" >> /var/rsa/NSDCONF.txt
echo "nsd=mynsd1" >> /var/rsa/NSDCONF.txt
echo "usage=dataAndMetadata" >> /var/rsa/NSDCONF.txt
 
echo "%nsd:" >> /var/rsa/NSDCONF.txt
echo "device=/dev/sdc" >> /var/rsa/NSDCONF.txt
echo "nsd=mynsd2" >> /var/rsa/NSDCONF.txt
echo "usage=dataAndMetadata" >> /var/rsa/NSDCONF.txt

/usr/lpp/mmfs/bin/mmcrnsd -F /var/rsa/NSDCONF.txt


/usr/lpp/mmfs/bin/mmcrfs /dev/fs_gpfs01 -F /var/rsa/NSDCONF.txt -A yes -T /fs_gpfs01


/usr/lpp/mmfs/bin/mmmount /fs_gpfs01 -a






  
fi
   BASH

 config.vm.provision "shell", run: "once" do |s|
 s.inline = $script
 end


 config.vm.network "public_network", ip: "192.168.0.157", bridge: "enp1s5", adapter: 2




end

